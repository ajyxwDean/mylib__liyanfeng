// test.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
#include <iostream>
#include <cstring>
#include <cstdio>

using namespace std;

int main()
{
    // 定义一个变量，用于存储总行数
    // 另外，定义的变量不管后面怎么用，安全起见一定要给个初始值，一般情况赋初值为0
    int nLineTotal = 0;
    cin >> nLineTotal;
    
    // 首先观察题目，第一行星号个数是1个，第二行星号个数是3个，第三行星号个数是5个。。。以此类推可以得出
    // 每行的星号个数是奇数，假如行数用变量nLineTotal（从0开始）表示，那么每行的星号个数是2 * nLineTotal + 1，（手动展开：nLineTotal = 0，1，2...时对应的值是1,3,5...）
    // 也就是本题目考察是对奇数用计算机表示的方法
    // 那么我们先不考虑打印格式的问题，也就是不考虑星号前面的空格，先把每行正确的星号个数打印出来，代码如下：

    // 第一层循环，进行"行打印"，解决我要打印多少行的问题
    for (int i = 0; i < nLineTotal; i++)
    {
        //第二层循环，进行"行内容打印"，解决我当前行要打印多少个星号的问题
        for (int j = 0; j < (2 * i + 1); j++)
            cout << "*";
        
        // 每行内容打印完成后，输出一个回行
        cout << "\n";
    }

    // 接下来
    // 先打印一条华丽的分割线
    for (int i = 0; i < 100; i++)
    {
        cout << "-";
    }
    cout << "\n";

    // 代码执行到这里，已经能看到每行打印星号的个数是正确的
    // 下面我们把上面的代码拷贝过来，再添加一个功能，就是每行星号前面的打印合适数量的空格，
    // 以此来实现一个三角形的形状
    
    // 仍然是第一层循环，进行"行打印"，解决我要打印多少行的问题
    int nTemp = nLineTotal - 1;
    for (int i = 0; i < nLineTotal; i++)
    {
        // 因为是在星号前面打印空格，所以打印空格代码要放在打印星号代码的前面
        // 通过观察，三角形最后一行的空格数是0，倒数第二行空格数比最后一行的空格数多1，
        // 倒数第三行空格数又比倒数第二行空格数多1，以此类推可以得出，从最后一行开始，到第一行，每行
        // 的空格数是0,1,2,...(nLineTotal - 1)，因为我们打印是不可能倒着打印，而是从第一行开始打印的
        // 所以可以得出，从第一行开始，每行的空格数是(nLineTotal - 1)，...2,1,0
        // 为了便于理解，我们添加一个变量nTemp（该变量的初始值是(nLineTotal - 1)），用于记录每行的空格数
        // 代码就好写了，如下：
        
        // 第二层打印空格循环
        for (int k = 0; k < nTemp; k++)
        {
            // 注意，一个好习惯是用花括号把循环体代码包起来，那怕循环体只有一行代码
            cout << " ";
        }

        // 第二层循环，进行"行内容打印"，解决我当前行要打印多少个星号的问题
        for (int j = 0; j < (2 * i + 1); j++)
        {
            cout << "*";
        }

        // 行内容打印完成后，输出一个回行
        cout << "\n";

        // 同时，别忘了更新一下“下一行”的空格数哦
        nTemp = nTemp - 1;
    }
}
    // 好了，到这里已经能看到一个完美的三角形了
    // 注意，要学会的一个编程思维是，把复杂问题进行分解多个简单的小问题
    // 小问题解决了，大问题也就解决了，本题是先打印正确数量的星号，再打印星号前面的空格，这样同时考虑的问题
    // 就少了，另外还有一点，就是要学会如何把一个现实问题转换成数学问题，
    // 通过观察通过观察通过观察（重要的事情说三遍）提取问题中的关键点，找出其中的数学规律
    // 一般来说，任何编程问题都是可以找到一定规律的，要从多个角度进行思考。
    // 最后，请李延峰小朋友反复思考这道理的解题过程，要彻底理解解题的过程（也就是一步一步怎么出来的），才能做到举一反三

    //******************************************************************//
    // 留2个作业：
    // 1: 把这个三角形上下颠倒过来，代码该怎么修改？如下：
    //  *****
    //   ***
    //    *
    // 2: 试试不用nTemp这个变量，看能不能行呢，代码该如何修改呢？

    // 留2个挑战：
    // 挑战1：追加从1开始的行号打印，如下
    // 1   *
    // 2  ***
    // 3 *****
    // 挑战2: 把三角形旋转90°如何打印？










//
///
//
//
//
// #include <bits/stdc++.h>
// 
// using namespace std;
// 
// int main(){
//  return 0;
// }
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
//
